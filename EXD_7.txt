1)SQL>CREATE OR REPLACE TRIGGER PASS_LENGTH1
    BEFORE INSERT ON user_1023
    FOR EACH ROW
    DECLARE
        password_length NUMBER;
    BEGIN
        password_length := LENGTH(:NEW.password);
        IF password_length < 8 THEN
            raise_application_error(-20001, 'Password must be at least 8 characters');
  END IF;
    END;
     /
 ---
 SQL> insert into user_1023 (userid, name, email, password, phone)values (12, 'a', 'a@gmail.com', '12', 123456789);
 -----
 SQL> insert into user_1023 (userid, name, email, password, phone)values (12, 'a', 'a@gmail.com', '123456789', 123456789);
 -----

2)CREATE OR REPLACE TRIGGER user_email_not_null_trigger
BEFORE UPDATE ON user_1023
FOR EACH ROW
BEGIN
  IF :NEW.email IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('Email address cannot be null');
  END IF;
END;
/
----
  UPDATE user_1023 SET email = NULL WHERE userid = 1;
----
3)
CREATE OR REPLACE TRIGGER user_email_domain_trigger
BEFORE DELETE ON user_1023
FOR EACH ROW
BEGIN
  IF INSTR(:OLD.email, 'example.com') > 0 THEN
    RAISE_APPLICATION_ERROR(-20003, 'Deletion of users with "example.com" email domain is not allowed');
  END IF;
END;
/
---
DELETE FROM user_1023 WHERE EMAIL='a@gmail.com';
---
4)
CREATE OR REPLACE TRIGGER count_inserted_tuples_trigger
AFTER INSERT ON user_1023
DECLARE
  inserted_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO inserted_count FROM user_1023;
  DBMS_OUTPUT.PUT_LINE('Number of new tuples inserted: ' || inserted_count);
END;
/
---
INSERT INTO user_1023 (userid, name)VALUES (23, 'soorya');
-----
5)
CREATE OR REPLACE TRIGGER user_email_changed_trigger
AFTER UPDATE ON user_1023
FOR EACH ROW
BEGIN
  IF :OLD.email <> :NEW.email THEN
    DBMS_OUTPUT.PUT_LINE('User email has been changed');
  END IF;
END;
/
-----
UPDATE user_1023
SET email = 'soorya45@example.com'
WHERE userid = 23;

----
6)CREATE OR REPLACE TRIGGER user_deleted_trigger
AFTER DELETE ON user_1023
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('User has been deleted');
END;
/
----
DELETE FROM user_1023 WHERE userid = 23;
----
7)
CREATE OR REPLACE TRIGGER event_date_future_trigger
BEFORE INSERT ON event_1023
FOR EACH ROW
BEGIN
  IF :NEW.eventdate <= SYSDATE THEN
    RAISE_APPLICATION_ERROR(-20004, 'Event date must be in the future');
  END IF;
END;
/
----
INSERT INTO event_1023 (eventid, name, eventdate)
VALUES (23, 'Mass Event', TO_DATE('01-NOV-23', 'DD-MM-YY'));
----
INSERT INTO event_1023 (eventid, name, eventdate)
VALUES (23, 'Mass Event', TO_DATE('25-NOV-23', 'DD-MM-YY'));
----






------
8)CREATE OR REPLACE TRIGGER event_time_after_7am_trigger
BEFORE UPDATE ON event
FOR EACH ROW
BEGIN
  IF TO_NUMBER(TO_CHAR(:NEW.event_time, 'HH24')) < 7 THEN
    RAISE_APPLICATION_ERROR(-20005, 'Event time cannot be set before 7:00 AM');
  END IF;
END;
/
----
9)CREATE OR REPLACE TRIGGER event_deleted_trigger
AFTER DELETE ON event
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('Event has been deleted');
END;
/
----
10)CREATE OR REPLACE TRIGGER event_time_changed_trigger
AFTER UPDATE ON event_1023
FOR EACH ROW
BEGIN
  IF :OLD.time <> :NEW.time THEN
    DBMS_OUTPUT.PUT_LINE('Event time has been changed');
  END IF;
END;
/
----
UPDATE event_1023 SET time = TO_TIMESTAMP('2024-09-05 06:00:00', 'YYYY-MM-DD HH24:MI:SS') WHERE eventid = 2;
----




11)CREATE OR REPLACE TRIGGER venue_name_not_empty_trigger
BEFORE INSERT ON venue_1023
FOR EACH ROW
BEGIN
  IF :NEW.name IS NULL OR TRIM(:NEW.name) = '' THEN
    RAISE_APPLICATION_ERROR(-20006, 'Venue name cannot be empty');
  END IF;
END;
/
---
INSERT INTO venue_1023 (venueid, name) VALUES (601, '');
----
12)CREATE OR REPLACE TRIGGER venue_deletion_trigger
BEFORE DELETE ON venue_1023
FOR EACH ROW
BEGIN
  IF :OLD.VenueID < 105 THEN
    RAISE_APPLICATION_ERROR(-20007, 'Deletion of venues with VenueID less than 105 is not allowed');
  END IF;
END;
/
DELETE FROM venue_1023 WHERE venueid = 102;
----
13)CREATE OR REPLACE TRIGGER venue_inserted_trigger
AFTER INSERT ON venue_1023
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('New row has been added to the Venue table');
END;
/
----
INSERT INTO venue_1023 (venueid, name) VALUES (301, 'New Venue');
----
14)CREATE OR REPLACE TRIGGER venue_updated_trigger
AFTER UPDATE ON venue_1023
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('A row in the Venue table has been updated');
END;
/
----
UPDATE venue_1023 SET name = 'Updated Venue' WHERE venueid = 101;
----
